(window.webpackJsonp = window.webpackJsonp || []).push([[0], {
    101: function(I, _, a) {
        "use strict";
        a.r(_),
        a.d(_, "KEYCODES", function() {
            return y
        });
        var y = (l=>(l.ENTER = "Enter",
        l.ESC = "Escape",
        l.TAB = "Tab",
        l.SPACE = " ",
        l.LEFT = "ArrowLeft",
        l.RIGHT = "ArrowRight",
        l.HOME = "Home",
        l.END = "End",
        l))(y || {})
    },
    105: function(I, _, a) {
        "use strict";
        a.r(_),
        a.d(_, "DsSurvey", function() {
            return X
        });
        var y = a(6)
          , l = a(25)
          , P = a(101)
          , r = a(157)
          , h = a(24)
          , m = a(13)
          , d = a(47)
          , D = Object.defineProperty
          , R = Object.defineProperties
          , F = Object.getOwnPropertyDescriptors
          , M = Object.getOwnPropertySymbols
          , k = Object.prototype.hasOwnProperty
          , w = Object.prototype.propertyIsEnumerable
          , B = (s,e,t)=>e in s ? D(s, e, {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: t
        }) : s[e] = t
          , v = (s,e)=>{
            for (var t in e || (e = {}))
                k.call(e, t) && B(s, t, e[t]);
            if (M)
                for (var t of M(e))
                    w.call(e, t) && B(s, t, e[t]);
            return s
        }
          , f = (s,e)=>R(s, F(e))
          , $ = (s=>(s.ALERT = ".survey-default__alert",
        s.BACK = ".survey-default__cta-back",
        s.COUNTER = ".survey-panel__counter",
        s.END = "#survey-panel-end",
        s.FORM = ".survey-default__form",
        s.HEADER = ".survey-panel--header",
        s.INPUT = "input",
        s.NEXT = ".survey-default__cta-next",
        s.PANEL_CONTAINER = ".survey-default__panel-container",
        s.PANEL_SUBMITTED_CTA = ".survey-panel--end__cta",
        s.PANEL_VISIBLE = ".survey-panel.is-visible",
        s.QUESTIONS = ".survey-panel--question",
        s.SEPARATOR = ".survey-panel__separator",
        s.START = "#survey-panel-start",
        s.SURVEY_CONTROLS = ".survey-default__controls",
        s.SURVEY_PANEL = ".survey-panel",
        s.TOTAL = ".survey-panel__total-questions-for-os",
        s))($ || {})
          , W = (s=>(s.BLOCK = "survey-default",
        s.CENTERED = "centered",
        s.FADE = "fade",
        s.FULL_HEIGHT = "full-height",
        s.HIDDEN = "hidden",
        s.SURVEY_UI = "survey-default__ui",
        s.VISIBLE = "is-visible",
        s.CONTROLS_END = "flex-end",
        s))(W || {})
          , j = (s=>(s.START_PANEL = "survey-panel--start",
        s))(j || {})
          , q = (s=>(s.BACK = "back",
        s.CLOSE = "close",
        s.COMPLETE = "complete",
        s.DECLINE = "decline",
        s.NAV = "nav",
        s.NEXT = "next",
        s.OPEN_TEXT_FIELD = "Open Text Field",
        s.OPTOUT = "optout-survey",
        s.SITE = "site survey",
        s.START = "start",
        s.START_LABEL = "get started",
        s.STEP_VIEW = "step view",
        s.STEP_COMPLETE = "step complete",
        s.SURVEY_NAME = "survey",
        s))(q || {})
          , H = (s=>(s.DEFAULT = "default",
        s.IPHONE = "iphone",
        s))(H || {})
          , Y = (s=>(s.DEFAULT = "survey-default",
        s.DYNAMIC = "survey-default-dynamic",
        s))(Y || {});
        const J = {
            version: {
                default: "a",
                iphone: "b"
            }
        }
          , G = "data-nimble-component-config"
          , K = 2;
        class X extends y.a {
            constructor(e, t) {
                super(e, t, []);
                this.isEnabled = !1,
                this.indexQuestionList = [],
                this.isIOSDevice = !1,
                this.isDynamic = !1,
                this.validations = [],
                this.nextQuestions = [],
                this.flowNumber = 0;
                var n, i, o;
                this.osQuestions = [],
                this.allQuestions = [],
                this.filteredPanels = [],
                this.currentQuestion = 0,
                this.currentPanelConfig = {},
                this.currentInputs = [],
                this.dao = r.a.get("short-term"),
                this.currentOS = "default",
                this.indexQuestion = 0,
                this.indexQuestionList = [],
                this.baseConfigAnalytics = {
                    eventCategory: "survey",
                    moduleName: "survey-default"
                },
                this.version = this.config_.version,
                this.panelIndex = 0,
                this.isDynamic = (i = (n = this.config_) == null ? void 0 : n.isDynamic) != null ? i : !1,
                this.validations = this.isDynamic && (((o = this.config_) == null ? void 0 : o.validations) || []),
                this.nextQuestions = [],
                this.currentPanelValue = 0,
                this.flowNumber = 0,
                this.isIOSDevice = Object(h.detectDevice)() === h.DeviceType.IOS,
                this.registerSurvey = this.registerSurvey.bind(this),
                this.enableSurvey = this.enableSurvey.bind(this),
                this.onKeydown = this.onKeydown.bind(this),
                this.closeSurvey = this.closeSurvey.bind(this),
                this.handleReadyStateChange = this.handleReadyStateChange.bind(this),
                this.handleCloseSurveyAnalytics = this.handleCloseSurveyAnalytics.bind(this)
            }
            hasConnected_() {
                var e, t;
                if (this.getSurveyElements(),
                this.dao.read(this.getSurveyCookieKey()))
                    return;
                this.filterPanelsForCurrentOS(),
                this.setCounters(),
                this.nextPanel = this.filteredPanels[this.currentQuestion + 1],
                this.__element.addEventListener("click", this.closeSurveyEventHandler.bind(this)),
                (e = this.nextBtn) == null || e.addEventListener("click", i=>this.changePanel(i)),
                (t = this.backBtn) == null || t.addEventListener("click", i=>{
                    this.changePanel(i, !1),
                    this.handBackEventAnalytics()
                }
                ),
                this.store_.subscribe(this.actionTypes_.SHOW_SURVEY, this.enableSurvey),
                this.store_.subscribe(this.actionTypes_.CLOSE_SURVEY, this.closeSurvey),
                this.updatePanel(),
                this.setUiClass(),
                this.panelsLength = [...this.__element.querySelectorAll(".survey-panel")].length,
                this.indexQuestionList = this.config_.indexQuestionList || [],
                (this.isIOSDevice && this.config_.id === "survey-default" || !this.isIOSDevice && this.isDynamic && this.config_.id === "survey-default-dynamic") && this.registerSurvey()
            }
            getSurveyElements() {
                this.form = this.__element.querySelector(".survey-default__form"),
                this.alertElement = this.__element.querySelector(".survey-default__alert"),
                this.nextBtn = this.__element.querySelector(".survey-default__cta-next"),
                this.backBtn = this.__element.querySelector(".survey-default__cta-back"),
                this.panelContainer = this.__element.querySelector(".survey-default__panel-container"),
                this.startPanel = this.__element.querySelector("#survey-panel-start"),
                this.endPanel = this.__element.querySelector("#survey-panel-end"),
                this.currentPanel = this.__element.querySelector(".survey-panel.is-visible"),
                this.currentPanel && (this.currentPanelConfig = Object(l.a)(this.currentPanel, "data-p-config"),
                this.currentPanelFilled = Object(l.a)(this.currentPanel, "data-p-filled")),
                this.allQuestions = this.__element.querySelectorAll(".survey-panel--question"),
                this.controls = this.__element.querySelector(".survey-default__controls")
            }
            filterPanelsForCurrentOS() {
                const e = Array.from(this.allQuestions);
                this.osQuestions = [...e.filter(t=>{
                    this.currentOS = Object(h.detectDevice)() === "IOS" ? "iphone" : "default";
                    const {osVisibility: n} = t.dataset;
                    return JSON.parse(n).includes(this.currentOS)
                }
                )],
                this.filteredPanels = [this.startPanel, ...this.osQuestions, this.endPanel]
            }
            setCounters() {
                this.osQuestions.forEach((e,t)=>{
                    const n = e.querySelector(".survey-panel__counter")
                      , i = e.querySelector(".survey-panel__total-questions-for-os");
                    if (n && (n.innerText = (t + 1).toString()),
                    i && (i.innerText = this.isDynamic ? "" : this.osQuestions.length.toString()),
                    this.isDynamic) {
                        const o = e.querySelector(".survey-panel__separator");
                        o && o?.classList.add("hidden")
                    }
                }
                )
            }
            closeSurveyEventHandler(e) {
                !e.target.closest(".survey-panel--end__cta") || this.closeSurvey(this.config_.id)
            }
            enableSurvey(e) {
                e === this.config_.id && (this.isEnabled = !0),
                this.isEnabled && this.store_.commit(this.mutationTypes_.TRACKED_CUSTOM_EVENTS, {
                    trackedCustomEvent: {
                        ga4: !0,
                        node: this.__element,
                        ga4Id: d.a.SHOWN,
                        surveyVersion: this.analyticVersion
                    }
                })
            }
            onKeydown(e) {
                e.key === P.KEYCODES.ESC && this.closeSurvey(this.config_.id)
            }
            changePanel(e, t=!0) {
                var n, i, o, u, c, p, x, S, L, C, T, V, g, Q, E;
                if (e.preventDefault(),
                !this.isEnabled)
                    return;
                if (this.currentSelectedInputs = this.getSelectedInputs(),
                this.handlePanelAnalytics(e),
                !t && ((n = this.currentPanelConfig) == null ? void 0 : n.ctas.back.action) === "close" || t && ((i = this.currentPanelConfig) == null ? void 0 : i.ctas.next.action) === "close") {
                    this.closeSurvey(this.config_.id);
                    return
                }
                if (!t && ((o = this.currentPanelConfig) == null ? void 0 : o.ctas.back.action) === "decline") {
                    const b = {
                        eventLabel: "decline"
                    };
                    this.store_.commit(this.mutationTypes_.TRACKED_CUSTOM_EVENTS, {
                        trackedCustomEvent: {
                            ga4: !0,
                            node: this.__element,
                            ga4Id: d.a.SURVEY_DECLINE,
                            surveyVersion: this.analyticVersion
                        }
                    }),
                    this.closeSurvey(this.config_.id, b);
                    return
                }
                if (t && !this.currentPanelFilled) {
                    (u = this.alertElement) == null || u.classList.add("is-visible");
                    return
                }
                const A = this.currentPanel;
                if ((c = this.alertElement) == null || c.classList.remove("is-visible"),
                (p = this.panelContainer) == null || p.classList.add("fade"),
                (x = this.controls) == null || x.classList.add("flex-end"),
                this.setUiClass(!1),
                ((S = this.currentPanelConfig) == null ? void 0 : S.submit) && t && (this.sendData(),
                this.handleCompleteSurveyAnalytics()),
                this.currentQuestion > 0 && this.isDynamic && ((L = this.validations) == null ? void 0 : L.length) !== 0)
                    if (this.currentQuestion === 1) {
                        const {currentPanel: b, currentQuestion: O, nextPanel: U, previousPanel: N} = this.getOrderNextQuestions(this.currentPanelValue);
                        this.currentQuestion = O,
                        this.currentPanel = b,
                        this.nextPanel = U,
                        this.previousPanel = N
                    } else {
                        const {currentQuestion: b, currentPanel: O, nextPanel: U, previousPanel: N} = this.getNextQuestion(t, this.currentQuestion);
                        this.currentQuestion = b,
                        this.currentPanel = O,
                        this.nextPanel = U,
                        this.previousPanel = N
                    }
                else
                    this.currentPanel = t ? this.nextPanel : this.previousPanel,
                    this.currentQuestion = t ? this.currentQuestion + 1 : this.currentQuestion - 1,
                    this.nextPanel = this.filteredPanels[this.currentQuestion + 1],
                    this.previousPanel = this.filteredPanels[this.currentQuestion - 1];
                this.currentPanel && (this.currentPanelConfig = Object(l.a)(this.currentPanel, "data-p-config"),
                this.currentPanelFilled = Object(l.a)(this.currentPanel, "data-p-filled")),
                this.currentPanel && (this.currentInputs = [...this.currentPanel.querySelectorAll("input")]),
                (C = this.currentPanelConfig) != null && C.centered ? (T = this.panelContainer) == null || T.classList.add("centered") : (V = this.panelContainer) == null || V.classList.remove("centered"),
                A?.classList.remove("is-visible"),
                (g = this.currentPanel) == null || g.classList.add("is-visible"),
                (Q = this.panelContainer) == null || Q.classList.remove("fade"),
                this.setUiClass(),
                this.updatePanel(),
                this.handlePanelFilled(),
                (E = this.nextBtn) == null || E.blur()
            }
            getOrderNextQuestions(e) {
                var t, n, i, o, u, c;
                const p = (t = this.validations) == null ? void 0 : t.find(g=>g.answer.includes(e));
                this.flowNumber = ((i = (n = this.validations) == null ? void 0 : n.findIndex(g=>g.answer.includes(e))) != null ? i : 0) + 1,
                this.nextQuestions = p?.questions || [];
                const x = this.nextQuestions.length + 1
                  , S = ((o = this.nextQuestions) == null ? void 0 : o[0]) || 0
                  , L = ((u = this.nextQuestions) == null ? void 0 : u[1]) || 0
                  , C = this.filteredPanels[S]
                  , T = this.filteredPanels[L]
                  , V = this.filteredPanels[1];
                return (c = this.nextQuestions) == null || c.forEach((g,Q)=>{
                    if (this.filteredPanels[g]) {
                        const E = this.filteredPanels[g]
                          , A = E.querySelector(".survey-panel__counter")
                          , b = E.querySelector(".survey-panel__separator")
                          , O = E.querySelector(".survey-panel__total-questions-for-os");
                        A && (A.textContent = (Q + K).toString()),
                        b && b?.classList.remove("hidden"),
                        O && (O.innerHTML = x.toString())
                    }
                }
                ),
                this.filteredPanels.forEach((g,Q)=>{
                    if (Q >= K && Q < this.filteredPanels.length - 1) {
                        const E = [...g.querySelectorAll("input")];
                        E.length !== 0 && E.forEach(A=>{
                            A.checked = !1
                        }
                        )
                    }
                }
                ),
                {
                    currentPanel: C,
                    currentQuestion: S,
                    nextPanel: T,
                    previousPanel: V
                }
            }
            getNextQuestion(e, t) {
                const n = this.nextQuestions.indexOf(t)
                  , i = n === 0
                  , o = n === this.nextQuestions.length - 1;
                let u = -1
                  , c = 0;
                e ? o ? c = this.filteredPanels.length - 1 : (u = n + 1,
                c = this.nextQuestions[u]) : i ? (c = 1,
                this.flowNumber = 0) : (u = n - 1,
                c = this.nextQuestions[u]);
                let p = this.filteredPanels.length - 1
                  , x = 1;
                u >= 0 && (u + 1 < this.nextQuestions.length && (p = this.nextQuestions[u + 1]),
                u - 1 >= 0 && (x = this.nextQuestions[u - 1]));
                const S = e ? this.nextPanel : this.previousPanel
                  , L = this.filteredPanels[p]
                  , C = this.filteredPanels[x];
                return {
                    currentPanel: S,
                    currentQuestion: c,
                    nextPanel: L,
                    previousPanel: C
                }
            }
            closeSurvey(e, t={}) {
                if (!this.isEnabled || e !== this.config_.id)
                    return;
                let n = f(v({}, t), {
                    surveyQuestionNumber: "decline"
                });
                const i = [".survey-default__panel-container", ".survey-panel.is-visible"].join(" > ");
                if (!this.__element.querySelector(i).classList.contains("survey-panel--start")) {
                    const c = this.getQuestionNumber(!0)
                      , p = this.getQuestion(!0);
                    n = f(v({}, n), {
                        surveyQuestionNumber: c,
                        surveyQuestion: p
                    })
                }
                this.isEnabled = !1,
                this.__element.classList.remove("full-height"),
                document.removeEventListener("keydown", this.onKeydown),
                this.store_.broadcast(this.actionTypes_.CLOSE_SURVEY, this.config_.id),
                this.optoutUser(),
                this.handleCloseSurveyAnalytics(n)
            }
            updatePanel() {
                var e, t, n, i;
                !this.isStarted && ((e = this.currentPanelConfig) == null ? void 0 : e.type) === "full-height" && (this.isStarted = !0,
                this.__element.classList.add("full-height"),
                this.store_.broadcast(this.actionTypes_.START_SURVEY, this.config_.id),
                document.addEventListener("keydown", this.onKeydown)),
                this.updateCta(this.nextBtn, (t = this.currentPanelConfig) == null ? void 0 : t.ctas.next),
                this.updateCta(this.backBtn, (n = this.currentPanelConfig) == null ? void 0 : n.ctas.back),
                this.enableCurrentInputs(),
                this.setInputListeners(),
                this.panelIndex = (i = this.currentPanelConfig) == null ? void 0 : i.index
            }
            updateCta(e, t) {
                const n = e.querySelector("span") || e;
                t.display ? (e.classList.remove("hidden"),
                e.tabIndex = 0) : (e.classList.add("hidden"),
                e.tabIndex = -1),
                n.innerText = t.text
            }
            enableCurrentInputs() {
                this.currentInputs.forEach(e=>{
                    e.tabIndex = 0
                }
                )
            }
            setInputListeners() {
                this.currentInputs.forEach(e=>{
                    e.addEventListener("change", ()=>{
                        this.handlePanelFilled()
                    }
                    )
                }
                )
            }
            handlePanelFilled() {
                var e, t;
                let n = !0;
                if (this.currentInputs.length && (n = this.currentInputs.some(i=>i.checked === !0)),
                this.currentPanelFilled = n,
                n && ((e = this.alertElement) == null || e.classList.remove("is-visible")),
                (t = this.currentPanel) == null || t.setAttribute("dataPFilled", n),
                n) {
                    const i = this.currentInputs.find(c=>c.checked)
                      , o = i?.id
                      , u = Number(o?.split("_")[1]) || 0;
                    this.currentPanelValue = u + 1
                }
            }
            getSelectedInputs() {
                return this.currentInputs.filter(e=>e.checked === !0)
            }
            setUiClass(e=!0) {
                var t, n;
                e ? this.__element.classList.add(`survey-default__ui-${(t = this.currentPanel) == null ? void 0 : t.dataset.panel}`) : this.__element.classList.remove(`survey-default__ui-${(n = this.currentPanel) == null ? void 0 : n.dataset.panel}`)
            }
            registerSurvey() {
                this.store_.broadcast(this.actionTypes_.REGISTER_SURVEY, {
                    id: this.config_.id,
                    data: this.config_.data
                }),
                this.handleLaunchForAnalytics(0)
            }
            sendData() {
                this.valdidateDataTosend(),
                this.formData = new FormData(this.form),
                this.submitData()
            }
            valdidateDataTosend() {
                this.wasSubmitted || !this.isEnabled || (this.wasSubmitted = !0)
            }
            handleReadyStateChange() {
                this.xhr && this.xhr.readyState === 4 && (this.xhr.status === 200 ? this.optoutUser() : this.submitRetries !== 0 ? (this.submitRetries--,
                this.submitData()) : console.error("Submission has been unsuccessful."))
            }
            submitData() {
                this.xhr = new XMLHttpRequest,
                this.xhr.onreadystatechange = this.handleReadyStateChange,
                this.xhr.open("POST", this.config_.endpoint, !0),
                this.xhr.send(this.formData)
            }
            optoutUser() {
                const e = new Date;
                e.setUTCMonth(e.getUTCMonth() + this.expireInMonths_);
                const t = this.getSurveyCookieKey();
                this.dao.save(t, "true", e)
            }
            getSurveyCookieKey() {
                var e;
                const t = Object(l.a)((e = this.form) == null ? void 0 : e.parentElement, G)
                  , {data: n} = t;
                return n?.customCookieKey || "optout-survey"
            }
            handlePanelAnalytics(e) {
                this.indexQuestion = this.indexQuestionList[this.panelIndex] || this.panelIndex,
                this.handleStartEventAnalytics(e),
                this.handleNextEventAnalytics(e),
                this.handleSelectedInputsAnalytics()
            }
            handleStartEventAnalytics(e) {
                var t;
                const n = e.target
                  , i = !this.panelIndex
                  , o = (t = this.backBtn) == null ? void 0 : t.contains(n)
                  , u = {
                    eventLabel: "get started",
                    eventAction: this.getStepVersion("start")
                };
                let c = this.baseConfigAnalytics;
                o || i && (c = f(v(v({}, c), u), {
                    ga4Id: d.a.START
                }),
                this.captureSurveyAnalyticsEvents(c),
                this.handleLaunchForAnalytics(1))
            }
            getQuestionNumber(e=!1) {
                var t;
                const n = (t = this.currentPanel) == null ? void 0 : t.querySelector(".survey-panel__counter")
                  , i = parseInt(n?.textContent || "0", 10) + 1;
                return e ? i - 1 : i
            }
            getQuestion(e=!1) {
                var t, n;
                return e ? (t = this.currentPanel) == null ? void 0 : t.getAttribute("data-p-label") : (n = this.nextPanel) == null ? void 0 : n.getAttribute("data-p-label")
            }
            getQuestionResponse() {
                if (this.currentSelectedInputs.length > 0)
                    return this.currentSelectedInputs.map(t=>t.value.split(":")[0]).join("|").trim()
            }
            handleLaunchForAnalytics(e, t=!1) {
                if (!this.isEnabled)
                    return;
                const n = Object(l.a)(this.__element, "data-g-config")
                  , i = this.getQuestion(t)
                  , o = this.indexQuestionList[e] || e;
                e === 0 || e === this.panelsLength - 1 || (n.eventLabel = `${o}-${i} `,
                n.eventAction = this.getStepVersion("step view"),
                this.captureSurveyAnalyticsEvents(f(v({}, n), {
                    ga4Id: d.a.STEP_VIEW,
                    surveyQuestionNumber: this.getQuestionNumber() || 1,
                    surveyQuestion: this.getQuestion()
                })))
            }
            handleSelectedInputsAnalytics() {
                if (this.panelIndex > 0 && this.panelIndex < this.panelsLength && !this.currentSelectedInputs)
                    return;
                const t = this.getQuestionResponse();
                if (!t)
                    return;
                const n = this.getStepVersion("step complete")
                  , i = `${this.indexQuestion}-${t}`
                  , o = {
                    eventAction: n,
                    eventLabel: i
                };
                this.captureSurveyAnalyticsEvents(f(v(v({}, this.baseConfigAnalytics), o), {
                    ga4Id: d.a.STEP_COMPLETE,
                    surveyQuestionNumber: this.getQuestionNumber(!0),
                    surveyQuestion: this.getQuestion(!0),
                    surveyQuestionResponse: t
                }))
            }
            getStepVersion(e) {
                return `site survey ${this.analyticVersion} - ${e}`
            }
            handleCloseSurveyAnalytics(e) {
                const t = v(v({}, this.setCloseDataAnalytics()), e);
                this.captureSurveyAnalyticsEvents(t)
            }
            setCloseDataAnalytics() {
                return f(v({}, this.baseConfigAnalytics), {
                    eventAction: this.getStepVersion("nav"),
                    eventLabel: "close",
                    ga4Id: d.a.SURVEY_CLOSE
                })
            }
            handleCompleteSurveyAnalytics() {
                const e = this.setCompleteDataAnalytics();
                this.captureSurveyAnalyticsEvents(f(v({}, e), {
                    ga4Id: d.a.SURVEY_COMPLETE,
                    surveyQuestionNumber: this.getQuestionNumber(),
                    surveyQuestion: this.getQuestion(),
                    surveyQuestionResponse: this.getQuestionResponse()
                }))
            }
            setCompleteDataAnalytics() {
                return f(v({}, this.baseConfigAnalytics), {
                    eventAction: this.getStepVersion("complete"),
                    eventLabel: "complete"
                })
            }
            handleNextEventAnalytics(e) {
                var t, n;
                const i = e.target
                  , u = (((t = this.currentPanelConfig) == null ? void 0 : t.ctas.next.action) || "").toLowerCase() === "next" && this.panelIndex
                  , c = this.setQuestionDataAnalytics(this.panelIndex - 2, "next") || {};
                !((n = this.nextBtn) != null && n.contains(i)) || (u && this.currentPanelFilled && this.handleLaunchForAnalytics(this.panelIndex + 1),
                u && this.captureSurveyAnalyticsEvents(f(v({}, c), {
                    ga4Id: d.a.SURVEY_NAV,
                    surveyQuestionNumber: this.getQuestionNumber(),
                    surveyQuestion: this.getQuestion()
                })))
            }
            handBackEventAnalytics() {
                const e = this.setQuestionDataAnalytics(this.panelIndex + 1, "back");
                this.panelIndex && (this.handleLaunchForAnalytics(this.panelIndex, !0),
                e && this.captureSurveyAnalyticsEvents(f(v({}, e), {
                    ga4Id: d.a.SURVEY_NAV,
                    surveyQuestionNumber: this.getQuestionNumber(!0),
                    surveyQuestion: this.getQuestion(!0)
                })))
            }
            setQuestionDataAnalytics(e, t) {
                const n = {
                    eventLabel: t,
                    eventAction: ""
                };
                let i = e
                  , o = 0;
                return t === "next" && (i += 2),
                o = this.indexQuestionList[i] || i,
                n.eventAction = this.getStepVersion("nav"),
                f(v(v({}, this.baseConfigAnalytics), n), {
                    indexQuestion: o
                })
            }
            get analyticVersion() {
                const e = `${J.version[this.currentOS]}${this.flowNumber !== 0 ? this.flowNumber : ""}`;
                return `v${this.version}${e}`
            }
            captureSurveyAnalyticsEvents(e) {
                const {currentScroll: t} = this.store_.getters;
                this.store_.commit(this.mutationTypes_.TRACKED_CUSTOM_EVENTS, {
                    trackedCustomEvent: v({
                        event: "trackEvent",
                        scrollPosition: Object(m.getScrollPercentage)(t, this.global_),
                        node: this.__element,
                        surveyVersion: this.analyticVersion
                    }, e)
                })
            }
        }
    },
    137: function(I, _, a) {
        "use strict";
        a.d(_, "a", function() {
            return y
        });
        class y {
            constructor(P) {
                this.global = P,
                this.prefix = "and_"
            }
            generateKey(P) {
                return `${this.prefix}${P}`
            }
        }
    },
    157: function(I, _, a) {
        "use strict";
        a.d(_, "a", function() {
            return h
        });
        var y = a(160)
          , l = a(159)
          , P = a(158);
        const r = window;
        class h {
            static get(d) {
                switch (d) {
                case "short-term":
                    return this.cookieStorageDao_ = this.cookieStorageDao_ || new P.a(r),
                    this.cookieStorageDao_;
                case "persistent":
                    return this.localStorageDao_ = this.localStorageDao_ || new l.a(r),
                    this.localStorageDao_;
                case "temporary":
                default:
                    return this.sessionStorageDao_ = this.sessionStorageDao_ || new y.a(r),
                    this.sessionStorageDao_
                }
            }
        }
    },
    158: function(I, _, a) {
        "use strict";
        a.d(_, "a", function() {
            return l
        });
        var y = a(137);
        class l extends y.a {
            constructor(r) {
                super(r);
                this.cookie = this.global.document.cookie
            }
            save(r, h, m, d="/") {
                const D = this.generateKey(r)
                  , R = m.toGMTString();
                return this.global.document.cookie = `${D}=${h}; expires=${R}; path=${d}`,
                this.read(r)
            }
            read(r) {
                var h;
                const m = `${this.generateKey(r)}=`
                  , d = (h = this.cookie) == null ? void 0 : h.split(";");
                for (let D = 0; D < d.length; D++)
                    if (d[D].indexOf(m) > -1)
                        return d[D];
                return !1
            }
            delete(r) {
                const h = "expires=Thu, 01 Jan 1970 00:00:01 GMT";
                this.cookie = `${this.generateKey(r)}=; ${h}; path="/"`
            }
        }
    },
    159: function(I, _, a) {
        "use strict";
        a.d(_, "a", function() {
            return l
        });
        var y = a(137);
        class l extends y.a {
            constructor(r) {
                super(r);
                this.storage = this.global.localStorage
            }
            save(r, h) {
                const m = JSON.stringify(h);
                return this.storage.setItem(this.generateKey(r), m),
                this.read(r)
            }
            read(r) {
                return JSON.parse(this.storage.getItem(this.generateKey(r)))
            }
            delete(r) {
                this.storage.removeItem(this.generateKey(r))
            }
        }
    },
    160: function(I, _, a) {
        "use strict";
        a.d(_, "a", function() {
            return l
        });
        var y = a(137);
        class l extends y.a {
            constructor(r) {
                super(r);
                this.storage = this.global.sessionStorage
            }
            save(r, h) {
                const m = JSON.stringify(h);
                return this.storage.setItem(this.generateKey(r), m),
                this.read(r)
            }
            read(r) {
                return JSON.parse(this.storage.getItem(this.generateKey(r)))
            }
            delete(r) {
                this.storage.removeItem(this.generateKey(r))
            }
        }
    }
}]);
